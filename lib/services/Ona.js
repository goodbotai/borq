/** @module services.ona */

const http = require('../../lib/HTTP.js');
const config = require('../../config/Config.js');
const aggregate = require('../../lib/Aggregate.js');

const onaSubmissionEndpointURL = `https://api.ona.io/${
  config.onaOrg
}/submission`;

/**
 * send a POST to Ona's submission endpoint.
 * We only need this function for its side effects therefore it lacks a
 * return statemnt.
 * @param {object} payload
 * @param {string} url - change the URL for testing
 * @return {promise} a promise holding the request response
 */
function postSubmissionToOna(payload, url = onaSubmissionEndpointURL) {
  return http.request(
    url,
    {
      method: 'POST',
      body: JSON.stringify(payload),
      headers: {
        Authorization: `Token ${config.onaApiToken}`,
        'Content-Type': 'application/json',
      },
    },
    'POST submission to Ona: '
  );
}

/**
 * Generate a submission and POST it to Ona
 * We only need this function for its side effects therefore it lacks a
 * return statemnt.
 * @param {object} convo A conversation object generated by botkit.
 * @param {object} extra - Object containing {name, idString}
 *  name - Space seperated name of the respondent e.g John Doe
 *  idString - Ona form idString
 * @param {string} url - change the URL for testing
 * @return {promise} a promise holding the request response
 */
function genAndPostSubmissionToOna(
  convo,
  {name: respondentName, idString},
  url = onaSubmissionEndpointURL
) {
  const aggregatedConvo = aggregate.aggregate(convo);
  const submission = aggregate.genOnaSubmission(aggregatedConvo);
  const [firstName, lastName] = respondentName.split(' ');
  submission.id = idString;
  submission.submission.first_name = firstName;
  submission.submission.last_name = lastName;
  submission.submission.messenger_id = aggregatedConvo.psid;
  return postSubmissionToOna(submission, url);
}

module.exports = {
  genAndPostSubmissionToOna,
};
